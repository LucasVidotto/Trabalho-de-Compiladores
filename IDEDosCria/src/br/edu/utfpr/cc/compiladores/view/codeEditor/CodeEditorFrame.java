/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package br.edu.utfpr.cc.compiladores.view.codeEditor;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;


public class CodeEditorFrame extends javax.swing.JPanel {

    private String valueEditor;
    private Integer countLines;
    private File file;
    
    private List<String> keyWords = new ArrayList<>();
    
    private void createKeyWords(){
        keyWords.add("bora dar um piao");
        keyWords.add("redondo");
        keyWords.add("recebe");
        keyWords.add("seloco");
        keyWords.add("desbaratinar uma ideia");
        keyWords.add("se pa");
        keyWords.add("senao mete um migue");
        keyWords.add("repete essa porra");
        keyWords.add("ate");
        keyWords.add("lanca ai");
        keyWords.add("bagulho eh memo");
        keyWords.add("eh maior");
        keyWords.add("eh menor");
        keyWords.add("eh menor ou igual");
        keyWords.add("eh diferente");
        keyWords.add("eh gemeo");
        keyWords.add("&&");
        keyWords.add("||");       
        
    }

    public String getValueEditor() {
        return valueEditor;
    }

    public void setValueEditor(String valueEditor) {
        this.valueEditor = valueEditor;
    }
    
    public String getFileName(){
        if(file != null){
            return file.getName();
        }
        return "";
    }

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    /**
     * Creates new form CodeEditor
     */
    public CodeEditorFrame(String valueEditor, File file) {
        initComponents();
        this.valueEditor = valueEditor;
        this.file = file;
        this.valueEditorInput.setText(valueEditor);
        getCountLines();
        createKeyWords();
    }

    public CodeEditorFrame() {
        this.valueEditor = "";
        initComponents();
        getCountLines();
        createKeyWords();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        countLinesInput = new javax.swing.JTextArea();
        valueEditorInput = new javax.swing.JEditorPane();

        countLinesInput.setEditable(false);
        countLinesInput.setColumns(20);
        countLinesInput.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        countLinesInput.setRows(5);
        countLinesInput.setEnabled(false);
        countLinesInput.setFocusable(false);
        countLinesInput.setOpaque(false);
        countLinesInput.setRequestFocusEnabled(false);

        valueEditorInput.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        valueEditorInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                valueEditorInputKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(countLinesInput, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueEditorInput, javax.swing.GroupLayout.DEFAULT_SIZE, 1068, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(countLinesInput, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
            .addComponent(valueEditorInput)
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 847, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 808, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void valueEditorInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueEditorInputKeyReleased
        valueEditor = valueEditorInput.getText();
        getCountLines();
        
        if(evt.getKeyChar() == '['){
            try {
                valueEditorInput.getDocument().insertString(valueEditorInput.getCaretPosition(),"]", null);
                valueEditorInput.setCaretPosition(valueEditorInput.getCaretPosition()-1);
            } catch (BadLocationException ex) {
                Logger.getLogger(CodeEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        if(evt.getKeyChar() == '{'){
            try {
                valueEditorInput.getDocument().insertString(valueEditorInput.getCaretPosition(),"}", null);
                valueEditorInput.setCaretPosition(valueEditorInput.getCaretPosition()-1);
            } catch (BadLocationException ex) {
                Logger.getLogger(CodeEditorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_valueEditorInputKeyReleased

    private void highlightKeywords(){
        
        for(var keyword : keyWords){

            valueEditor = valueEditor.replace(keyword, "<b>"+keyword+"</b>");
            valueEditorInput.setText(valueEditor);
        }
    }
    
    private void getCountLines() {

        if (valueEditor != null) {
            var lines = valueEditor.split("\n").length;
            if (lines == 0) {
                lines = valueEditor.split("").length;
                if(lines == 0){
                    lines = 1;
                }else{
                    countLines = lines+1;
                }
            } else {
                countLines = lines;
            }
        } else {
            countLines = 1;
        }

        var i = 0;
        var linesString = "";
        while (i < countLines) {
            linesString += i + 1 + "\n";
            i++;
        }
        countLinesInput.setText(linesString);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea countLinesInput;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JEditorPane valueEditorInput;
    // End of variables declaration//GEN-END:variables
}
